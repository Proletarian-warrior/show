MODULE MainModule
VAR num receivedData{1024};
VAR num inc:= 0;
VAR num inc1:= 0;
VAR num inc2:= 0;
VAR num inc3:= 0;
VAR num inc4:= 0;
VAR num inc5:= 0;
VAR speeddata VelocityVariable;
VAR rawbytes data;
VAR socketdev server;
VAR socketdev client;
VAR string message;
VAR string string1:="";
VAR string string2{4}:=["","","",""];
VAR bool flag1:=FALSE;
VAR jointtarget jp;
VAR string s1;
VAR string s2;
VAR num Rx;
VAR num Ry;
VAR num Rz;
VAR pose object;
VAR robtarget init:=[[938.09,0.00,1012.15],[0.367915,0,0.92986,0],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
VAR pose objectb;
VAR num X;
VAR num Y;
VAR num Z;
TASK PERS tooldata PKI_500:=[TRUE,[[0,0,0],[1,0,0,0]],[-1,[0,0,0],[1,0,0,0],0,0,0]];
CONST robtarget p10:=[[942.71,459.79,1187.61],[0.688984,-0.159064,0.688984,0.159064],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
 
    PROC main()
! Go Home
!MoveAbsj [[0,0,0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], vmax, z100, tool0;
!create communication  
      SocketClose server;
      SocketCreate server;
      SocketBind server,"127.0.0.1",55000;
      SocketListen server;
      SocketAccept server,client;
        TPErase;
!send a meassage to the client 
       !SocketSend client,\Str:="Hello client ! "; 
      WHILE TRUE DO
           a:
!receive a message from the client
      SocketReceive client,\Data:=receivedData \ReadNoOfBytes:=1024 \Time:= WAIT_MAX;
      !VelocityVariable choose--need to solve !
      
      !Identifier is 1 ,get joints values ,moveabsj
      IF receivedData{1}=1 THEN
          movejoint;
      ENDIF
      IF receivedData{1}=2 THEN
          changeRPY;
      ENDIF
      IF receivedData{1}=3 THEN
          changeXYZ;
      ENDIF
      IF receivedData{1}=4 THEN
          changeXYZandRPY;
      ENDIF
      GOTO a; 
      ENDWHILE     
    ENDPROC
    
    
    PROC movejoint()
      IF receivedData{2}=0 THEN
      inc:=-receivedData{3};
          ELSE
      inc:=receivedData{3};
      ENDIF
        IF receivedData{4}=0 THEN
      inc1:=-receivedData{5};
          ELSE
      inc1:=receivedData{5};
      ENDIF
        IF receivedData{6}=0 THEN
      inc2:=-receivedData{7};
          ELSE
      inc2:=receivedData{7};
      ENDIF
        IF receivedData{8}=0 THEN
      inc3:=-receivedData{9};
          ELSE
      inc3:=receivedData{9};
      ENDIF
        IF receivedData{10}=0 THEN
      inc4:=-receivedData{11};
          ELSE
      inc4:=receivedData{11};
      ENDIF
       IF receivedData{12}=0 THEN
      inc5:=-receivedData{13};
          ELSE
      inc5:=receivedData{13};
      ENDIF
       !jog move mode        
      MoveAbsj[[inc,inc1,inc2,inc3,inc4,inc5],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]],vmax, fine, tool0;  
       !read joint data and show in the TP screen
      TPErase;
       jp:=CJointT();
       s1:="J1:"+NumToStr(jp.robax.rax_1,2)+",";
       s1:=s1+"J2:"+NumToStr(jp.robax.rax_2,2)+",";
       s1:=s1+"J3:"+NumToStr(jp.robax.rax_3,2);
       s2:="J4:"+NumToStr(jp.robax.rax_4,2)+",";
       s2:=s2+"J5:"+NumToStr(jp.robax.rax_5,2)+",";
       s2:=s2+"J6:"+NumToStr(jp.robax.rax_6,2)+",";
       TPWrite s1;
       TPWrite s2;  
     ENDPROC
 
     
    PROC changeRPY()
      IF receivedData{2}=0 THEN
     Rz:=-receivedData{3};
          ELSE
     Rz:=receivedData{3};
      ENDIF
        IF receivedData{4}=0 THEN
      Ry:=-receivedData{5};
          ELSE
      Ry:=receivedData{5};
      ENDIF
        IF receivedData{6}=0 THEN
     Rx:=-receivedData{7};
          ELSE
     Rx:=receivedData{7};
      ENDIF   
     init.rot := OrientZYX(Rz, Ry, Rx);
     ! init.rot:=objectb.rot;
      SingArea \Wrist;
      MoveJ init,vmax,fine,tool0;
    ENDPROC
    
    PROC changeXYZ()
     IF receivedData{2}=0 THEN
     X:=-receivedData{3};
          ELSE
     X:=receivedData{3};
      ENDIF
        IF receivedData{4}=0 THEN
      Y:=-receivedData{5};
          ELSE
      Y:=receivedData{5};
      ENDIF
        IF receivedData{6}=0 THEN
     Z:=-receivedData{7};
          ELSE
     Z:=receivedData{7};
      ENDIF        
      SingArea \Wrist; 
     MoveL Offs(p10,X,Y,Z), vmax, fine, tool0;
    ENDPROC
    PROC changeXYZandRPY()
      ConfJ \Off;
   
    ENDPROC
    
ENDMODULE
